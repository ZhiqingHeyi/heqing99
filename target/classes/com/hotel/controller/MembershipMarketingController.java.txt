package com.hotel.controller;

import com.hotel.entity.MemberLevel;
import com.hotel.entity.MarketingCampaign;
import com.hotel.entity.User;
import com.hotel.service.MarketingCampaignService;
import com.hotel.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.context.annotation.Profile;

import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;

/**
 * 会员营销活动控制器
 */
@RestController
@RequestMapping("/api/membership/marketing")
@Profile("disabled") // 暂时禁用此控制器
public class MembershipMarketingController {

    @Autowired
    private UserService userService;
    
    @Autowired
    private MarketingCampaignService marketingCampaignService;

    /**
     * 创建新的营销活动
     */
    @PostMapping("/campaigns")
    public ResponseEntity<?> createMarketingCampaign(@RequestBody MarketingCampaign campaign) {
        try {
            MarketingCampaign savedCampaign = marketingCampaignService.saveCampaign(campaign);
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "营销活动创建成功");
            response.put("campaign", savedCampaign);
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            Map<String, Object> response = new HashMap<>();
            response.put("success", false);
            response.put("message", "创建营销活动失败: " + e.getMessage());
            return ResponseEntity.badRequest().body(response);
        }
    }

    /**
     * 获取营销活动列表
     */
    @GetMapping("/campaigns")
    public ResponseEntity<?> getMarketingCampaigns(
            @RequestParam(required = false) Boolean active,
            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime startDate,
            @RequestParam(required = false) @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime endDate) {
        try {
            List<MarketingCampaign> campaigns;
            
            if (active != null && active) {
                campaigns = marketingCampaignService.getActiveCampaigns();
            } else if (startDate != null && endDate != null) {
                campaigns = marketingCampaignService.getCampaignsByDateRange(startDate, endDate);
            } else {
                campaigns = marketingCampaignService.getAllCampaigns();
            }
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("count", campaigns.size());
            response.put("campaigns", campaigns);
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            Map<String, Object> response = new HashMap<>();
            response.put("success", false);
            response.put("message", "获取营销活动失败: " + e.getMessage());
            return ResponseEntity.badRequest().body(response);
        }
    }

    /**
     * 获取特定营销活动详情
     */
    @GetMapping("/campaigns/{id}")
    public ResponseEntity<?> getMarketingCampaignDetails(@PathVariable Long id) {
        try {
            Optional<MarketingCampaign> campaignOpt = marketingCampaignService.getCampaignById(id);
            
            if (campaignOpt.isEmpty()) {
                Map<String, Object> response = new HashMap<>();
                response.put("success", false);
                response.put("message", "未找到ID为 " + id + " 的营销活动");
                return ResponseEntity.badRequest().body(response);
            }
            
            MarketingCampaign campaign = campaignOpt.get();
            
            // 获取活动参与人数统计
            int participantCount = marketingCampaignService.getParticipantCount(id);
            
            // 获取活动积分发放统计
            int totalPointsAwarded = marketingCampaignService.getTotalPointsAwarded(id);
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("campaign", campaign);
            response.put("participantCount", participantCount);
            response.put("totalPointsAwarded", totalPointsAwarded);
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            Map<String, Object> response = new HashMap<>();
            response.put("success", false);
            response.put("message", "获取营销活动详情失败: " + e.getMessage());
            return ResponseEntity.badRequest().body(response);
        }
    }

    /**
     * 更新营销活动
     */
    @PutMapping("/campaigns/{id}")
    public ResponseEntity<?> updateMarketingCampaign(
            @PathVariable Long id, 
            @RequestBody MarketingCampaign campaign) {
        try {
            Optional<MarketingCampaign> existingCampaignOpt = marketingCampaignService.getCampaignById(id);
            
            if (existingCampaignOpt.isEmpty()) {
                Map<String, Object> response = new HashMap<>();
                response.put("success", false);
                response.put("message", "未找到ID为 " + id + " 的营销活动");
                return ResponseEntity.badRequest().body(response);
            }
            
            // 确保ID一致
            campaign.setId(id);
            
            MarketingCampaign updatedCampaign = marketingCampaignService.saveCampaign(campaign);
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "营销活动更新成功");
            response.put("campaign", updatedCampaign);
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            Map<String, Object> response = new HashMap<>();
            response.put("success", false);
            response.put("message", "更新营销活动失败: " + e.getMessage());
            return ResponseEntity.badRequest().body(response);
        }
    }

    /**
     * 删除营销活动
     */
    @DeleteMapping("/campaigns/{id}")
    public ResponseEntity<?> deleteMarketingCampaign(@PathVariable Long id) {
        try {
            Optional<MarketingCampaign> existingCampaignOpt = marketingCampaignService.getCampaignById(id);
            
            if (existingCampaignOpt.isEmpty()) {
                Map<String, Object> response = new HashMap<>();
                response.put("success", false);
                response.put("message", "未找到ID为 " + id + " 的营销活动");
                return ResponseEntity.badRequest().body(response);
            }
            
            marketingCampaignService.deleteCampaign(id);
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "营销活动删除成功");
            response.put("id", id);
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            Map<String, Object> response = new HashMap<>();
            response.put("success", false);
            response.put("message", "删除营销活动失败: " + e.getMessage());
            return ResponseEntity.badRequest().body(response);
        }
    }

    /**
     * 向特定用户组发送营销活动
     */
    @PostMapping("/campaigns/{id}/send")
    public ResponseEntity<?> sendMarketingCampaign(
            @PathVariable Long id,
            @RequestParam(required = false) List<MemberLevel> targetLevels,
            @RequestParam(required = false) Integer minPoints,
            @RequestParam(required = false) Integer maxPoints,
            @RequestParam(required = false) List<Long> userIds) {
        try {
            Optional<MarketingCampaign> campaignOpt = marketingCampaignService.getCampaignById(id);
            
            if (campaignOpt.isEmpty()) {
                Map<String, Object> response = new HashMap<>();
                response.put("success", false);
                response.put("message", "未找到ID为 " + id + " 的营销活动");
                return ResponseEntity.badRequest().body(response);
            }
            
            MarketingCampaign campaign = campaignOpt.get();
            
            // 查找目标用户
            List<User> targetUsers = new ArrayList<>();
            
            if (userIds != null && !userIds.isEmpty()) {
                // 如果直接指定了用户ID列表，则使用这些用户
                for (Long userId : userIds) {
                    try {
                        User user = userService.getUserById(userId);
                        if (user.getRole() == User.UserRole.CUSTOMER) {
                            targetUsers.add(user);
                        }
                    } catch (Exception e) {
                        // 忽略找不到的用户
                    }
                }
            } else {
                // 否则，根据条件筛选用户
                List<User> allUsers = userService.getAllUsers().stream()
                        .filter(user -> user.getRole() == User.UserRole.CUSTOMER)
                        .collect(Collectors.toList());
                
                targetUsers = allUsers.stream()
                        .filter(user -> targetLevels == null || targetLevels.isEmpty() || 
                                targetLevels.contains(user.getMemberLevel()))
                        .filter(user -> minPoints == null || user.getPoints() >= minPoints)
                        .filter(user -> maxPoints == null || user.getPoints() <= maxPoints)
                        .collect(Collectors.toList());
            }
            
            if (targetUsers.isEmpty()) {
                Map<String, Object> response = new HashMap<>();
                response.put("success", false);
                response.put("message", "没有找到符合条件的目标用户");
                return ResponseEntity.badRequest().body(response);
            }
            
            // 发送营销活动
            int successCount = marketingCampaignService.sendCampaign(campaign, targetUsers);
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "营销活动发送成功");
            response.put("campaign", campaign);
            response.put("targetUserCount", targetUsers.size());
            response.put("successCount", successCount);
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            Map<String, Object> response = new HashMap<>();
            response.put("success", false);
            response.put("message", "发送营销活动失败: " + e.getMessage());
            return ResponseEntity.badRequest().body(response);
        }
    }

    /**
     * 获取用户参与的营销活动
     */
    @GetMapping("/user/{userId}/campaigns")
    public ResponseEntity<?> getUserCampaigns(@PathVariable Long userId) {
        try {
            User user = userService.getUserById(userId);
            
            if (user == null) {
                Map<String, Object> response = new HashMap<>();
                response.put("success", false);
                response.put("message", "未找到ID为 " + userId + " 的用户");
                return ResponseEntity.badRequest().body(response);
            }
            
            List<MarketingCampaign> userCampaigns = marketingCampaignService.getCampaignsByUser(user);
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("userId", userId);
            response.put("username", user.getUsername());
            response.put("name", user.getName());
            response.put("campaignCount", userCampaigns.size());
            response.put("campaigns", userCampaigns);
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            Map<String, Object> response = new HashMap<>();
            response.put("success", false);
            response.put("message", "获取用户营销活动失败: " + e.getMessage());
            return ResponseEntity.badRequest().body(response);
        }
    }

    /**
     * 追踪营销活动的点击情况
     */
    @PostMapping("/campaigns/{id}/track")
    public ResponseEntity<?> trackCampaignClick(
            @PathVariable Long id,
            @RequestParam Long userId,
            @RequestParam String action) {
        try {
            Optional<MarketingCampaign> campaignOpt = marketingCampaignService.getCampaignById(id);
            
            if (campaignOpt.isEmpty()) {
                Map<String, Object> response = new HashMap<>();
                response.put("success", false);
                response.put("message", "未找到ID为 " + id + " 的营销活动");
                return ResponseEntity.badRequest().body(response);
            }
            
            User user = userService.getUserById(userId);
            
            if (user == null) {
                Map<String, Object> response = new HashMap<>();
                response.put("success", false);
                response.put("message", "未找到ID为 " + userId + " 的用户");
                return ResponseEntity.badRequest().body(response);
            }
            
            // 记录用户的操作
            marketingCampaignService.trackUserAction(campaignOpt.get(), user, action);
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "成功记录用户操作");
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            Map<String, Object> response = new HashMap<>();
            response.put("success", false);
            response.put("message", "记录用户操作失败: " + e.getMessage());
            return ResponseEntity.badRequest().body(response);
        }
    }
} 