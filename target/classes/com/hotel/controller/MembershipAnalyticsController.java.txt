package com.hotel.controller;

import com.hotel.entity.ConsumptionRecord;
import com.hotel.entity.MemberLevel;
import com.hotel.entity.User;
import com.hotel.service.ConsumptionRecordService;
import com.hotel.service.PointsExchangeService;
import com.hotel.service.PointsExpiryService;
import com.hotel.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.context.annotation.Profile;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.*;
import java.util.stream.Collectors;

/**
 * 会员分析控制器
 */
@RestController
@RequestMapping("/api/membership/analytics")
@Profile("disabled") // 暂时禁用此控制器
public class MembershipAnalyticsController {

    @Autowired
    private UserService userService;
    
    @Autowired
    private ConsumptionRecordService consumptionRecordService;
    
    @Autowired
    private PointsExchangeService pointsExchangeService;
    
    @Autowired
    private PointsExpiryService pointsExpiryService;

    /**
     * 获取会员等级分布
     */
    @GetMapping("/level-distribution")
    public ResponseEntity<?> getMemberLevelDistribution() {
        try {
            List<User> allUsers = userService.getAllUsers().stream()
                    .filter(user -> user.getRole() == User.UserRole.CUSTOMER)
                    .collect(Collectors.toList());
            
            Map<MemberLevel, Long> levelCounts = allUsers.stream()
                    .collect(Collectors.groupingBy(User::getMemberLevel, Collectors.counting()));
            
            List<Map<String, Object>> result = new ArrayList<>();
            for (MemberLevel level : MemberLevel.values()) {
                Map<String, Object> levelData = new HashMap<>();
                levelData.put("level", level.name());
                levelData.put("displayName", level.getDisplayName());
                levelData.put("count", levelCounts.getOrDefault(level, 0L));
                levelData.put("percentage", allUsers.isEmpty() ? 0 : 
                        (double) levelCounts.getOrDefault(level, 0L) / allUsers.size() * 100);
                result.add(levelData);
            }
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("totalMembers", allUsers.size());
            response.put("distribution", result);
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            Map<String, Object> response = new HashMap<>();
            response.put("success", false);
            response.put("message", "获取会员等级分布失败: " + e.getMessage());
            return ResponseEntity.badRequest().body(response);
        }
    }

    /**
     * 获取会员增长趋势
     */
    @GetMapping("/growth-trend")
    public ResponseEntity<?> getMemberGrowthTrend(
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate) {
        try {
            List<User> allUsers = userService.getAllUsers().stream()
                    .filter(user -> user.getRole() == User.UserRole.CUSTOMER)
                    .filter(user -> {
                        LocalDateTime registrationTime = user.getRegistrationTime();
                        return registrationTime != null && 
                               !registrationTime.toLocalDate().isBefore(startDate) && 
                               !registrationTime.toLocalDate().isAfter(endDate);
                    })
                    .collect(Collectors.toList());
            
            Map<LocalDate, Long> dailyRegistrations = allUsers.stream()
                    .collect(Collectors.groupingBy(
                            user -> user.getRegistrationTime().toLocalDate(),
                            Collectors.counting()));
            
            List<Map<String, Object>> dailyData = new ArrayList<>();
            for (LocalDate date = startDate; !date.isAfter(endDate); date = date.plusDays(1)) {
                Map<String, Object> dayData = new HashMap<>();
                dayData.put("date", date.toString());
                dayData.put("count", dailyRegistrations.getOrDefault(date, 0L));
                dailyData.add(dayData);
            }
            
            // 计算周度和月度数据
            Map<String, Long> weeklyRegistrations = new HashMap<>();
            Map<String, Long> monthlyRegistrations = new HashMap<>();
            
            for (User user : allUsers) {
                LocalDate regDate = user.getRegistrationTime().toLocalDate();
                
                // 周数据 - 格式：YYYY-Www (e.g., 2023-W01)
                String weekKey = regDate.getYear() + "-W" + 
                        String.format("%02d", regDate.get(java.time.temporal.WeekFields.ISO.weekOfYear()));
                weeklyRegistrations.put(weekKey, 
                        weeklyRegistrations.getOrDefault(weekKey, 0L) + 1);
                
                // 月数据 - 格式：YYYY-MM
                String monthKey = regDate.getYear() + "-" + 
                        String.format("%02d", regDate.getMonthValue());
                monthlyRegistrations.put(monthKey, 
                        monthlyRegistrations.getOrDefault(monthKey, 0L) + 1);
            }
            
            List<Map<String, Object>> weeklyData = weeklyRegistrations.entrySet().stream()
                    .sorted(Map.Entry.comparingByKey())
                    .map(entry -> {
                        Map<String, Object> weekData = new HashMap<>();
                        weekData.put("week", entry.getKey());
                        weekData.put("count", entry.getValue());
                        return weekData;
                    })
                    .collect(Collectors.toList());
            
            List<Map<String, Object>> monthlyData = monthlyRegistrations.entrySet().stream()
                    .sorted(Map.Entry.comparingByKey())
                    .map(entry -> {
                        Map<String, Object> monthData = new HashMap<>();
                        monthData.put("month", entry.getKey());
                        monthData.put("count", entry.getValue());
                        return monthData;
                    })
                    .collect(Collectors.toList());
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("startDate", startDate.toString());
            response.put("endDate", endDate.toString());
            response.put("totalNewMembers", allUsers.size());
            response.put("dailyData", dailyData);
            response.put("weeklyData", weeklyData);
            response.put("monthlyData", monthlyData);
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            Map<String, Object> response = new HashMap<>();
            response.put("success", false);
            response.put("message", "获取会员增长趋势失败: " + e.getMessage());
            return ResponseEntity.badRequest().body(response);
        }
    }

    /**
     * 获取会员消费分析
     */
    @GetMapping("/consumption-analysis")
    public ResponseEntity<?> getConsumptionAnalysis(
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate) {
        try {
            LocalDateTime startDateTime = startDate.atStartOfDay();
            LocalDateTime endDateTime = endDate.plusDays(1).atStartOfDay();
            
            List<ConsumptionRecord> records = consumptionRecordService.getConsumptionRecordsByDateRange(
                    startDateTime, endDateTime);
            
            // 总体消费统计
            double totalAmount = records.stream()
                    .mapToDouble(r -> r.getAmount().doubleValue())
                    .sum();
            
            double avgAmount = records.isEmpty() ? 0 : 
                    totalAmount / records.size();
            
            // 按会员等级统计
            Map<MemberLevel, List<ConsumptionRecord>> recordsByLevel = records.stream()
                    .collect(Collectors.groupingBy(r -> r.getUser().getMemberLevel()));
            
            List<Map<String, Object>> levelConsumption = new ArrayList<>();
            for (MemberLevel level : MemberLevel.values()) {
                List<ConsumptionRecord> levelRecords = recordsByLevel.getOrDefault(level, Collections.emptyList());
                
                double levelTotal = levelRecords.stream()
                        .mapToDouble(r -> r.getAmount().doubleValue())
                        .sum();
                
                double levelAvg = levelRecords.isEmpty() ? 0 : 
                        levelTotal / levelRecords.size();
                
                Map<String, Object> levelData = new HashMap<>();
                levelData.put("level", level.name());
                levelData.put("displayName", level.getDisplayName());
                levelData.put("recordCount", levelRecords.size());
                levelData.put("totalAmount", levelTotal);
                levelData.put("averageAmount", levelAvg);
                levelData.put("percentage", totalAmount <= 0 ? 0 : 
                        (levelTotal / totalAmount * 100));
                
                levelConsumption.add(levelData);
            }
            
            // 按消费类型统计
            Map<String, List<ConsumptionRecord>> recordsByType = records.stream()
                    .collect(Collectors.groupingBy(ConsumptionRecord::getType));
            
            List<Map<String, Object>> typeConsumption = new ArrayList<>();
            for (Map.Entry<String, List<ConsumptionRecord>> entry : recordsByType.entrySet()) {
                String type = entry.getKey();
                List<ConsumptionRecord> typeRecords = entry.getValue();
                
                double typeTotal = typeRecords.stream()
                        .mapToDouble(r -> r.getAmount().doubleValue())
                        .sum();
                
                double typeAvg = typeRecords.isEmpty() ? 0 : 
                        typeTotal / typeRecords.size();
                
                Map<String, Object> typeData = new HashMap<>();
                typeData.put("type", type);
                typeData.put("recordCount", typeRecords.size());
                typeData.put("totalAmount", typeTotal);
                typeData.put("averageAmount", typeAvg);
                typeData.put("percentage", totalAmount <= 0 ? 0 : 
                        (typeTotal / totalAmount * 100));
                
                typeConsumption.add(typeData);
            }
            
            // 按日期统计
            Map<LocalDate, List<ConsumptionRecord>> recordsByDate = records.stream()
                    .collect(Collectors.groupingBy(r -> r.getConsumptionTime().toLocalDate()));
            
            List<Map<String, Object>> dailyConsumption = new ArrayList<>();
            for (LocalDate date = startDate; !date.isAfter(endDate); date = date.plusDays(1)) {
                List<ConsumptionRecord> dateRecords = recordsByDate.getOrDefault(date, Collections.emptyList());
                
                double dateTotal = dateRecords.stream()
                        .mapToDouble(r -> r.getAmount().doubleValue())
                        .sum();
                
                Map<String, Object> dateData = new HashMap<>();
                dateData.put("date", date.toString());
                dateData.put("recordCount", dateRecords.size());
                dateData.put("totalAmount", dateTotal);
                
                dailyConsumption.add(dateData);
            }
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("startDate", startDate.toString());
            response.put("endDate", endDate.toString());
            response.put("totalRecords", records.size());
            response.put("totalAmount", totalAmount);
            response.put("averageAmount", avgAmount);
            response.put("byLevel", levelConsumption);
            response.put("byType", typeConsumption);
            response.put("byDate", dailyConsumption);
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            Map<String, Object> response = new HashMap<>();
            response.put("success", false);
            response.put("message", "获取会员消费分析失败: " + e.getMessage());
            return ResponseEntity.badRequest().body(response);
        }
    }

    /**
     * 获取积分兑换分析
     */
    @GetMapping("/points-exchange-analysis")
    public ResponseEntity<?> getPointsExchangeAnalysis(
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate) {
        try {
            LocalDateTime startDateTime = startDate.atStartOfDay();
            LocalDateTime endDateTime = endDate.plusDays(1).atStartOfDay();
            
            List<User> allUsers = userService.getAllUsers().stream()
                    .filter(user -> user.getRole() == User.UserRole.CUSTOMER)
                    .collect(Collectors.toList());
            
            // 获取积分兑换记录
            var exchangeRecords = pointsExchangeService.getExchangeRecordsByDateRange(
                    startDateTime, endDateTime);
            
            int totalPoints = exchangeRecords.stream()
                    .mapToInt(r -> r.getPointsExchanged())
                    .sum();
            
            // 按会员等级统计
            Map<MemberLevel, List<User>> usersByLevel = allUsers.stream()
                    .collect(Collectors.groupingBy(User::getMemberLevel));
            
            Map<MemberLevel, Integer> exchangePointsByLevel = new HashMap<>();
            
            for (var record : exchangeRecords) {
                MemberLevel level = record.getUser().getMemberLevel();
                exchangePointsByLevel.put(level, 
                        exchangePointsByLevel.getOrDefault(level, 0) + record.getPointsExchanged());
            }
            
            List<Map<String, Object>> levelExchange = new ArrayList<>();
            for (MemberLevel level : MemberLevel.values()) {
                int levelPoints = exchangePointsByLevel.getOrDefault(level, 0);
                int levelUsers = usersByLevel.getOrDefault(level, Collections.emptyList()).size();
                
                Map<String, Object> levelData = new HashMap<>();
                levelData.put("level", level.name());
                levelData.put("displayName", level.getDisplayName());
                levelData.put("totalPoints", levelPoints);
                levelData.put("userCount", levelUsers);
                levelData.put("averagePerUser", levelUsers <= 0 ? 0 : 
                        (double) levelPoints / levelUsers);
                levelData.put("percentage", totalPoints <= 0 ? 0 : 
                        (double) levelPoints / totalPoints * 100);
                
                levelExchange.add(levelData);
            }
            
            // 按兑换项目统计
            Map<String, Integer> exchangePointsByItem = new HashMap<>();
            
            for (var record : exchangeRecords) {
                String item = record.getExchangeItem();
                exchangePointsByItem.put(item, 
                        exchangePointsByItem.getOrDefault(item, 0) + record.getPointsExchanged());
            }
            
            List<Map<String, Object>> itemExchange = exchangePointsByItem.entrySet().stream()
                    .map(entry -> {
                        Map<String, Object> itemData = new HashMap<>();
                        itemData.put("item", entry.getKey());
                        itemData.put("totalPoints", entry.getValue());
                        itemData.put("percentage", totalPoints <= 0 ? 0 : 
                                (double) entry.getValue() / totalPoints * 100);
                        return itemData;
                    })
                    .sorted((a, b) -> ((Double)b.get("totalPoints")).compareTo((Double)a.get("totalPoints")))
                    .collect(Collectors.toList());
            
            // 按日期统计
            Map<LocalDate, Integer> exchangePointsByDate = new HashMap<>();
            
            for (var record : exchangeRecords) {
                LocalDate date = record.getExchangeTime().toLocalDate();
                exchangePointsByDate.put(date, 
                        exchangePointsByDate.getOrDefault(date, 0) + record.getPointsExchanged());
            }
            
            List<Map<String, Object>> dailyExchange = new ArrayList<>();
            for (LocalDate date = startDate; !date.isAfter(endDate); date = date.plusDays(1)) {
                int datePoints = exchangePointsByDate.getOrDefault(date, 0);
                
                Map<String, Object> dateData = new HashMap<>();
                dateData.put("date", date.toString());
                dateData.put("totalPoints", datePoints);
                
                dailyExchange.add(dateData);
            }
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("startDate", startDate.toString());
            response.put("endDate", endDate.toString());
            response.put("totalRecords", exchangeRecords.size());
            response.put("totalPointsExchanged", totalPoints);
            response.put("byLevel", levelExchange);
            response.put("byItem", itemExchange);
            response.put("byDate", dailyExchange);
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            Map<String, Object> response = new HashMap<>();
            response.put("success", false);
            response.put("message", "获取积分兑换分析失败: " + e.getMessage());
            return ResponseEntity.badRequest().body(response);
        }
    }

    /**
     * 获取会员活跃度分析
     */
    @GetMapping("/activity-analysis")
    public ResponseEntity<?> getMemberActivityAnalysis(
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate startDate,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate endDate) {
        try {
            LocalDateTime startDateTime = startDate.atStartOfDay();
            LocalDateTime endDateTime = endDate.plusDays(1).atStartOfDay();
            
            List<User> allUsers = userService.getAllUsers().stream()
                    .filter(user -> user.getRole() == User.UserRole.CUSTOMER)
                    .collect(Collectors.toList());
            
            // 获取消费记录
            List<ConsumptionRecord> consumptionRecords = consumptionRecordService
                    .getConsumptionRecordsByDateRange(startDateTime, endDateTime);
            
            // 按用户统计活跃度
            Map<Long, Integer> consumptionCountByUser = new HashMap<>();
            Map<Long, Double> consumptionAmountByUser = new HashMap<>();
            
            for (ConsumptionRecord record : consumptionRecords) {
                Long userId = record.getUser().getId();
                consumptionCountByUser.put(userId, 
                        consumptionCountByUser.getOrDefault(userId, 0) + 1);
                consumptionAmountByUser.put(userId, 
                        consumptionAmountByUser.getOrDefault(userId, 0.0) + 
                        record.getAmount().doubleValue());
            }
            
            // 计算活跃用户(有消费)比例
            long activeUserCount = consumptionCountByUser.size();
            double activeUserPercentage = allUsers.isEmpty() ? 0 : 
                    (double) activeUserCount / allUsers.size() * 100;
            
            // 按活跃度分组
            List<Map<String, Object>> activityGroups = new ArrayList<>();
            
            Map<String, Object> noActivityGroup = new HashMap<>();
            noActivityGroup.put("group", "0");
            noActivityGroup.put("description", "无活动");
            noActivityGroup.put("count", allUsers.size() - activeUserCount);
            noActivityGroup.put("percentage", allUsers.isEmpty() ? 0 : 
                    (double) (allUsers.size() - activeUserCount) / allUsers.size() * 100);
            activityGroups.add(noActivityGroup);
            
            Map<String, Long> activityGroupCounts = new HashMap<>();
            activityGroupCounts.put("1-2", consumptionCountByUser.values().stream()
                    .filter(count -> count >= 1 && count <= 2).count());
            activityGroupCounts.put("3-5", consumptionCountByUser.values().stream()
                    .filter(count -> count >= 3 && count <= 5).count());
            activityGroupCounts.put("6-10", consumptionCountByUser.values().stream()
                    .filter(count -> count >= 6 && count <= 10).count());
            activityGroupCounts.put("10+", consumptionCountByUser.values().stream()
                    .filter(count -> count > 10).count());
            
            for (Map.Entry<String, Long> entry : activityGroupCounts.entrySet()) {
                Map<String, Object> group = new HashMap<>();
                group.put("group", entry.getKey());
                group.put("description", entry.getKey() + "次消费");
                group.put("count", entry.getValue());
                group.put("percentage", allUsers.isEmpty() ? 0 : 
                        (double) entry.getValue() / allUsers.size() * 100);
                activityGroups.add(group);
            }
            
            // 计算平均消费频率和金额
            int totalConsumptionCount = consumptionRecords.size();
            double avgConsumptionPerUser = allUsers.isEmpty() ? 0 : 
                    (double) totalConsumptionCount / allUsers.size();
            
            double avgConsumptionPerActiveUser = activeUserCount <= 0 ? 0 : 
                    (double) totalConsumptionCount / activeUserCount;
            
            double totalConsumptionAmount = consumptionRecords.stream()
                    .mapToDouble(r -> r.getAmount().doubleValue())
                    .sum();
            
            double avgAmountPerUser = allUsers.isEmpty() ? 0 : 
                    totalConsumptionAmount / allUsers.size();
            
            double avgAmountPerActiveUser = activeUserCount <= 0 ? 0 : 
                    totalConsumptionAmount / activeUserCount;
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("startDate", startDate.toString());
            response.put("endDate", endDate.toString());
            response.put("totalDays", ChronoUnit.DAYS.between(startDate, endDate) + 1);
            response.put("totalUsers", allUsers.size());
            response.put("activeUsers", activeUserCount);
            response.put("activeUserPercentage", activeUserPercentage);
            response.put("activityGroups", activityGroups);
            response.put("totalConsumptionCount", totalConsumptionCount);
            response.put("avgConsumptionPerUser", avgConsumptionPerUser);
            response.put("avgConsumptionPerActiveUser", avgConsumptionPerActiveUser);
            response.put("totalConsumptionAmount", totalConsumptionAmount);
            response.put("avgAmountPerUser", avgAmountPerUser);
            response.put("avgAmountPerActiveUser", avgAmountPerActiveUser);
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            Map<String, Object> response = new HashMap<>();
            response.put("success", false);
            response.put("message", "获取会员活跃度分析失败: " + e.getMessage());
            return ResponseEntity.badRequest().body(response);
        }
    }

    /**
     * 获取用户积分到期预警
     */
    @GetMapping("/points-expiry-warning")
    public ResponseEntity<?> getPointsExpiryWarning(
            @RequestParam(defaultValue = "30") int daysBeforeExpiry) {
        try {
            var expiryRecords = pointsExpiryService.getUpcomingExpiryRecords(daysBeforeExpiry);
            
            // 按用户分组
            Map<Long, List<Map<String, Object>>> recordsByUser = new HashMap<>();
            
            for (var record : expiryRecords) {
                User user = record.getUser();
                Long userId = user.getId();
                
                if (!recordsByUser.containsKey(userId)) {
                    recordsByUser.put(userId, new ArrayList<>());
                }
                
                Map<String, Object> recordData = new HashMap<>();
                recordData.put("recordId", record.getId());
                recordData.put("points", record.getPoints());
                recordData.put("expiryDate", record.getExpiryDate().toString());
                recordData.put("daysLeft", ChronoUnit.DAYS.between(
                        LocalDateTime.now(), record.getExpiryDate()));
                recordData.put("notified", record.isNotified());
                recordData.put("source", record.getRemarks());
                
                recordsByUser.get(userId).add(recordData);
            }
            
            List<Map<String, Object>> userWarnings = new ArrayList<>();
            
            for (Map.Entry<Long, List<Map<String, Object>>> entry : recordsByUser.entrySet()) {
                Long userId = entry.getKey();
                List<Map<String, Object>> userRecords = entry.getValue();
                
                User user = userService.getUserById(userId);
                
                int totalPoints = userRecords.stream()
                        .mapToInt(r -> (Integer) r.get("points"))
                        .sum();
                
                Map<String, Object> userWarning = new HashMap<>();
                userWarning.put("userId", userId);
                userWarning.put("username", user.getUsername());
                userWarning.put("name", user.getName());
                userWarning.put("memberLevel", user.getMemberLevel().name());
                userWarning.put("memberLevelDisplay", user.getMemberLevel().getDisplayName());
                userWarning.put("totalExpiringPoints", totalPoints);
                userWarning.put("currentTotalPoints", user.getPoints());
                userWarning.put("expiringPercentage", user.getPoints() <= 0 ? 0 : 
                        (double) totalPoints / user.getPoints() * 100);
                userWarning.put("records", userRecords);
                
                userWarnings.add(userWarning);
            }
            
            // 按到期时间分组
            Map<String, Integer> pointsByExpiryWeek = new HashMap<>();
            
            for (var record : expiryRecords) {
                LocalDate expiryDate = record.getExpiryDate().toLocalDate();
                String weekKey = expiryDate.getYear() + "-W" + 
                        String.format("%02d", expiryDate.get(java.time.temporal.WeekFields.ISO.weekOfYear()));
                
                pointsByExpiryWeek.put(weekKey, 
                        pointsByExpiryWeek.getOrDefault(weekKey, 0) + record.getPoints());
            }
            
            List<Map<String, Object>> weeklyExpiry = pointsByExpiryWeek.entrySet().stream()
                    .sorted(Map.Entry.comparingByKey())
                    .map(entry -> {
                        Map<String, Object> weekData = new HashMap<>();
                        weekData.put("week", entry.getKey());
                        weekData.put("totalPoints", entry.getValue());
                        return weekData;
                    })
                    .collect(Collectors.toList());
            
            int totalExpiringPoints = expiryRecords.stream()
                    .mapToInt(r -> r.getPoints())
                    .sum();
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("daysBeforeExpiry", daysBeforeExpiry);
            response.put("totalExpiringPoints", totalExpiringPoints);
            response.put("recordCount", expiryRecords.size());
            response.put("userCount", recordsByUser.size());
            response.put("userWarnings", userWarnings);
            response.put("weeklyExpiry", weeklyExpiry);
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            Map<String, Object> response = new HashMap<>();
            response.put("success", false);
            response.put("message", "获取积分到期预警失败: " + e.getMessage());
            return ResponseEntity.badRequest().body(response);
        }
    }
} 