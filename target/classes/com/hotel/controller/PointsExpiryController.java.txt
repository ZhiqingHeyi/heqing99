package com.hotel.controller;

import com.hotel.entity.PointsExpiryRecord;
import com.hotel.entity.User;
import com.hotel.service.PointsExpiryService;
import com.hotel.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * 积分到期控制器
 */
@RestController
@RequestMapping("/api/points-expiry")
public class PointsExpiryController {

    @Autowired
    private PointsExpiryService pointsExpiryService;

    @Autowired
    private UserService userService;

    /**
     * 获取用户的积分到期记录
     */
    @GetMapping("/user/{userId}")
    public ResponseEntity<?> getUserPointsExpiryRecords(
            @PathVariable Long userId,
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size) {
        try {
            User user = userService.getUserById(userId);
            Page<PointsExpiryRecord> records = pointsExpiryService.getExpiryRecordsByUser(
                    user, 
                    PageRequest.of(page, size, Sort.by(Sort.Direction.DESC, "expiryDate")));
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("records", records.getContent());
            response.put("totalPages", records.getTotalPages());
            response.put("totalElements", records.getTotalElements());
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            Map<String, Object> response = new HashMap<>();
            response.put("success", false);
            response.put("message", "获取积分到期记录失败: " + e.getMessage());
            return ResponseEntity.badRequest().body(response);
        }
    }

    /**
     * 获取积分到期记录详情
     */
    @GetMapping("/{id}")
    public ResponseEntity<?> getPointsExpiryDetail(@PathVariable Long id) {
        try {
            PointsExpiryRecord record = pointsExpiryService.getExpiryRecordById(id);
            return ResponseEntity.ok(record);
        } catch (Exception e) {
            Map<String, Object> response = new HashMap<>();
            response.put("success", false);
            response.put("message", "获取积分到期记录详情失败: " + e.getMessage());
            return ResponseEntity.badRequest().body(response);
        }
    }

    /**
     * 添加积分并设置到期时间
     */
    @PostMapping("/add-points")
    public ResponseEntity<?> addPointsWithExpiry(
            @RequestParam Long userId,
            @RequestParam Integer points,
            @RequestParam String source) {
        try {
            User user = pointsExpiryService.addPointsWithExpiry(userId, points, source);
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "积分已添加，并设置到期时间");
            response.put("user", user);
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            Map<String, Object> response = new HashMap<>();
            response.put("success", false);
            response.put("message", "添加积分失败: " + e.getMessage());
            return ResponseEntity.badRequest().body(response);
        }
    }

    /**
     * 获取用户即将到期的积分
     */
    @GetMapping("/user/{userId}/upcoming")
    public ResponseEntity<?> getUpcomingExpiryPoints(
            @PathVariable Long userId,
            @RequestParam(defaultValue = "30") int days) {
        try {
            User user = userService.getUserById(userId);
            LocalDateTime now = LocalDateTime.now();
            LocalDateTime future = now.plusDays(days);
            
            List<PointsExpiryRecord> records = pointsExpiryService.getExpiryRecordsByUserAndDateRange(user, now, future);
            
            // 计算即将到期的总积分
            int totalExpiringPoints = 0;
            for (PointsExpiryRecord record : records) {
                totalExpiringPoints += record.getPoints();
            }
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("records", records);
            response.put("totalExpiringPoints", totalExpiringPoints);
            response.put("daysRange", days);
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            Map<String, Object> response = new HashMap<>();
            response.put("success", false);
            response.put("message", "获取即将到期积分失败: " + e.getMessage());
            return ResponseEntity.badRequest().body(response);
        }
    }

    /**
     * 手动触发积分到期处理（管理员功能）
     */
    @PostMapping("/process-expired")
    public ResponseEntity<?> processExpiredPoints() {
        try {
            pointsExpiryService.processExpiredPoints();
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "已处理过期积分");
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            Map<String, Object> response = new HashMap<>();
            response.put("success", false);
            response.put("message", "处理过期积分失败: " + e.getMessage());
            return ResponseEntity.badRequest().body(response);
        }
    }

    /**
     * 手动发送积分到期提醒（管理员功能）
     */
    @PostMapping("/send-reminders")
    public ResponseEntity<?> sendExpiryReminders(@RequestParam(defaultValue = "7") int daysBeforeExpiry) {
        try {
            pointsExpiryService.sendExpiryReminders(daysBeforeExpiry);
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("message", "已发送积分到期提醒");
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            Map<String, Object> response = new HashMap<>();
            response.put("success", false);
            response.put("message", "发送积分到期提醒失败: " + e.getMessage());
            return ResponseEntity.badRequest().body(response);
        }
    }

    /**
     * 统计用户总过期积分
     */
    @GetMapping("/user/{userId}/total-expired")
    public ResponseEntity<?> getTotalExpiredPoints(@PathVariable Long userId) {
        try {
            User user = userService.getUserById(userId);
            Integer totalExpiredPoints = pointsExpiryService.getTotalExpiredPointsByUser(user);
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("userId", userId);
            response.put("totalExpiredPoints", totalExpiredPoints);
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            Map<String, Object> response = new HashMap<>();
            response.put("success", false);
            response.put("message", "获取总过期积分失败: " + e.getMessage());
            return ResponseEntity.badRequest().body(response);
        }
    }

    /**
     * 按日期范围统计用户过期积分
     */
    @GetMapping("/user/{userId}/expired-by-date")
    public ResponseEntity<?> getExpiredPointsByDateRange(
            @PathVariable Long userId,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime start,
            @RequestParam @DateTimeFormat(iso = DateTimeFormat.ISO.DATE_TIME) LocalDateTime end) {
        try {
            User user = userService.getUserById(userId);
            Integer expiredPoints = pointsExpiryService.getTotalExpiredPointsByUserAndDateRange(user, start, end);
            
            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("userId", userId);
            response.put("start", start);
            response.put("end", end);
            response.put("expiredPoints", expiredPoints);
            
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            Map<String, Object> response = new HashMap<>();
            response.put("success", false);
            response.put("message", "按日期范围获取过期积分失败: " + e.getMessage());
            return ResponseEntity.badRequest().body(response);
        }
    }
} 